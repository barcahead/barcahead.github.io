<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ailurophile</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://barcahead.info/"/>
  <updated>2017-01-05T14:12:53.000Z</updated>
  <id>http://barcahead.info/</id>
  
  <author>
    <name>barcahead</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Parameterized type</title>
    <link href="http://barcahead.info/2017/01/05/parameterized-type/"/>
    <id>http://barcahead.info/2017/01/05/parameterized-type/</id>
    <published>2017-01-05T13:47:00.000Z</published>
    <updated>2017-01-05T14:12:53.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Generic"><a href="#Generic" class="headerlink" title="Generic"></a>Generic</h4><p>scala支持<code>parameterized types</code>,其实和java中的<code>generic</code>是一个含义，java用<code>&lt;T&gt;</code>,scala用<code>[T]</code></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> strings: <span class="type">List</span>[<span class="type">String</span>] = <span class="type">List</span>(<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>)</div><div class="line"><span class="keyword">val</span> ints: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line"><span class="keyword">val</span> somes: <span class="type">List</span>[<span class="type">Some</span>[<span class="type">Int</span>]] = <span class="type">List</span>(<span class="type">Some</span>(<span class="number">1</span>), <span class="type">Some</span>(<span class="number">2</span>), <span class="type">None</span>)</div></pre></td></tr></table></figure>
<h4 id="Variance"><a href="#Variance" class="headerlink" title="Variance"></a>Variance</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span>[+<span class="type">A</span>] </span>&#123;...&#125;   		<span class="comment">//covariant</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span>[-<span class="type">A</span>] </span>&#123;...&#125;   		<span class="comment">//contravariant</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span>[<span class="type">A</span>] </span>&#123;...&#125;    		<span class="comment">//invariant</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span>[-<span class="type">A</span>, <span class="type">B</span>, +<span class="type">C</span>] </span>&#123;...&#125;	<span class="comment">//mixed</span></div></pre></td></tr></table></figure>
<p><code>+</code>表示如果<code>A</code>是<code>B</code>的子类，则<code>X[A]</code>是<code>X[B]</code>的子类</p>
<p><code>-</code>表示如果<code>A</code>是<code>B</code>的子类，则<code>X[B]</code>是<code>X[A]</code>的子类</p>
<p>如果既不是<code>+</code>也不是<code>-</code>，则<code>X[A]</code>和<code>X[B]</code>没有关系</p>
<h5 id="Covariant"><a href="#Covariant" class="headerlink" title="Covariant"></a>Covariant</h5><p><code>String</code>是<code>AnyRef</code>的子类，<code>List[String]</code>也是<code>List[AnyRef]</code>的子类。<code>List</code>在scala中的声明如下</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">sealed</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">List</span>[+<span class="type">A</span>]</span></div></pre></td></tr></table></figure>
<h5 id="Cotravariant"><a href="#Cotravariant" class="headerlink" title="Cotravariant"></a>Cotravariant</h5><p>最简单的contravariant是traits <code>FuntionN</code>, <code>N</code>从0到22，代表函数参数的数量，比如<code>scala.Function2</code>。scala使用这些traits来实现匿名函数</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) map (i =&gt; i + <span class="number">3</span>) <span class="comment">// List(4, 5, 6, 7)</span></div></pre></td></tr></table></figure>
<p>函数表达式<code>i =&gt; i + 3</code>其实是<code>scala.Funtion1</code>的语法糖</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> f: <span class="type">Int</span> =&gt; <span class="type">Int</span> = <span class="keyword">new</span> <span class="type">Function1</span>[<span class="type">Int</span>, <span class="type">Int</span>] &#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(i: <span class="type">Int</span>): <span class="type">Int</span> = i + <span class="number">3</span></div><div class="line">&#125;</div><div class="line"><span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) map f</div></pre></td></tr></table></figure>
<p>由于Java 8之前的jvm不支持匿名函数，所以scala采用匿名类的方式来实现匿名函数，Java 8中添加了lambdas支持</p>
<p>traits <code>scala.Function1</code>的声明为</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Function1</span>[-<span class="type">T</span>, +<span class="type">R</span>] <span class="keyword">extends</span> <span class="title">AnyRef</span></span></div></pre></td></tr></table></figure>
<p>第一个类型参数为函数参数，是contravariant，第二个类型参数为函数返回值，是covariant。对于其他<code>FunctionN</code> ，函数参数都是contravariant</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CSuper</span> </span>&#123; <span class="function"><span class="keyword">def</span> <span class="title">msuper</span></span>() = println(<span class="string">"CSuper"</span>) &#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">CSuper</span> </span>&#123; <span class="function"><span class="keyword">def</span> <span class="title">m</span></span>() = println(<span class="string">"C"</span>) &#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CSub</span> <span class="keyword">extends</span> <span class="title">C</span> </span>&#123; <span class="function"><span class="keyword">def</span> <span class="title">msub</span></span>() = println(<span class="string">"CSub"</span>) &#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> f: <span class="type">C</span> =&gt; <span class="type">C</span> 	= 	(c: <span class="type">C</span>)		=&gt; <span class="keyword">new</span> <span class="type">C</span></div><div class="line">    f:			=	(c: <span class="type">CSuper</span>)	=&gt; <span class="keyword">new</span> <span class="type">CSub</span></div><div class="line">    f:			=	(c: <span class="type">CSuper</span>) =&gt; <span class="keyword">new</span> <span class="type">C</span></div><div class="line">    f: 			=	(c: <span class="type">C</span>)		=&gt; <span class="keyword">new</span> <span class="type">CSub</span></div><div class="line">    f:			=	(c: <span class="type">Csub</span>)	=&gt; <span class="keyword">new</span> <span class="type">CSuper</span>		<span class="comment">//编译错误！</span></div></pre></td></tr></table></figure>
<p>为什么?</p>
<a id="more"></a>
<blockquote>
<p>Liskov Substitution Principle (require less, provide more)</p>
</blockquote>
<p>通俗解释 <code>(c: CSuper) =&gt; new CSub</code>是安全的：</p>
<p>我们将会使用函数<code>f: C =&gt; C</code>，所以任何的有效的<code>C</code>类型的值可以作为函数调用的参数，并且 <code>f</code>会返回<code>C</code>类型的值。</p>
<p>当我们调用函数<code>f</code>的时候，实际上调用的是 <code>(c: CSuper) =&gt; new CSub</code>。这个函数不仅接受<code>C</code>类型的值，并且可以接受<code>C</code>的父类<code>CSuper</code>。所以当我们仅仅用<code>C</code>类型的值作为参数的时候，保证是安全的，因为函数<code>(c: CSuper) =&gt; new CSub</code>里只会使用<code>CSuper</code> 的方法。同样地，对于返回值，调用者期望得到类型<code>C</code>的值，函数返回<code>CSub</code>是安全的。</p>
<h5 id="Invariant"><a href="#Invariant" class="headerlink" title="Invariant"></a>Invariant</h5><p>对于mutable的类型参数，只能允许invariant</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContainerPlus</span>[+<span class="type">A</span>](<span class="params">var value: <span class="type">A</span></span>) </span></div><div class="line"><span class="comment">// error, covariant type A occurs in contravariant position</span></div></pre></td></tr></table></figure>
<p>对于mutable的变量，内部实现是把它当做一个private变量，然后自动提供getter和setter函数</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContainerPlus</span>[+<span class="type">A</span>](<span class="params">var a: <span class="type">A</span></span>) </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">var</span> _value: <span class="type">A</span> = a</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">value_=</span></span>(newA: <span class="type">A</span>): <span class="type">Unit</span> = _value = newA</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">value</span></span>: <span class="type">A</span> = _value</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>A同时出现在函数参数和函数返回值的位置上，既不能covariant也不能contravariant，所以只能invariant。</p>
<p>scala中的<code>Array</code>是mutable的，所以是invariant的，<code>Array[String]</code> 和<code>Array[AnyRef]</code>之间没有subtype的关系。</p>
<p>java中的<code>Array</code>是variant的，虽然可以通过编译，但是会有运行时异常。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaArrays</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    Integer[] array1 = <span class="keyword">new</span> Integer[] &#123;<span class="keyword">new</span> Integer(<span class="number">1</span>), <span class="keyword">new</span> Integer(<span class="number">2</span>) &#125;;</div><div class="line">    Number[] array2 = array1;</div><div class="line">    array2[<span class="number">1</span>] = <span class="keyword">new</span> Double(<span class="number">3.14</span>);      <span class="comment">// runtime error</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Lower-Type-Bounds"><a href="#Lower-Type-Bounds" class="headerlink" title="Lower Type Bounds"></a>Lower Type Bounds</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span>[+<span class="type">T</span>] </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">enqeue</span></span>[<span class="type">T</span>](x: <span class="type">T</span>): <span class="type">Queue</span>[<span class="type">T</span>] = &#123;...&#125;    <span class="comment">//编译错误</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于类型参数<code>T</code>出现在函数参数的位置，<code>Queue</code>不能被设计成covariant，但是我们可以利用<code>Lower Bounds</code>来突破限制。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span>[+<span class="type">T</span>] </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">enqueue</span></span>[<span class="type">U</span> &gt;: <span class="type">T</span>](x: <span class="type">U</span>): <span class="type">Queue</span>[<span class="type">U</span>] = &#123;...&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>U &gt;: T</code>表示传入的参数类型<code>U</code>必须是<code>T</code>的supertype。<code>T</code>是本身的supertype，所以也可以用类型<code>T</code>传入函数。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> q: <span class="type">Queue</span>[<span class="type">Apple</span>] = ...</div><div class="line"><span class="keyword">val</span> orange: <span class="type">Orange</span> = ...</div><div class="line"><span class="keyword">val</span> nq: <span class="type">Queue</span>[<span class="type">Fruit</span>] = q.enqueue(orange) <span class="comment">//得到了一个拥有多种水果的队列</span></div></pre></td></tr></table></figure>
<h4 id="Upper-Type-Bounds"><a href="#Upper-Type-Bounds" class="headerlink" title="Upper Type Bounds"></a>Upper Type Bounds</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">val firstName: <span class="type">String</span>, val lastName: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Ordered</span>[<span class="type">Person</span>] </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">compare</span></span>(that: <span class="type">Persion</span>) &#123;</div><div class="line">    lastName.compareToIngnoreCase(that.lastName)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span> </span>= firstName + <span class="string">" "</span> + lastName</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过实现traits <code>Ordered</code>的<code>compare</code>方法, 我们可以用<code>&gt;</code>,<code>&lt;</code>,<code>=</code>对<code>Person</code>进行比较。</p>
<p>如果定义一个排序函数对一个List进行排序，要求List中的元素具备了通过<code>&gt;</code>,<code>&lt;</code>,<code>=</code>进行比较的功能，我们可以通过<code>Upper Type Bounds</code>来做。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">orderedMergeSort</span></span>[<span class="type">T</span> &lt;: <span class="type">Ordered</span>[<span class="type">T</span>]](xs: <span class="type">List</span>[<span class="type">T</span>]): <span class="type">List</span>[<span class="type">T</span>] = &#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(xs: <span class="type">List</span>[<span class="type">T</span>], ys: <span class="type">List</span>[<span class="type">T</span>]): <span class="type">List</span>[<span class="type">T</span>] = </div><div class="line">    (xs, ys) <span class="keyword">match</span> &#123;</div><div class="line">      <span class="keyword">case</span> (<span class="type">Nil</span>, _) =&gt; ys</div><div class="line">      <span class="keyword">case</span> (_, <span class="type">Nil</span>) =&gt; xs</div><div class="line">      <span class="keyword">case</span> (x :: xs1, y :: ys1) =&gt;</div><div class="line">      	<span class="keyword">if</span> (x &lt; y) x :: merge(xs1, ys)</div><div class="line">        <span class="keyword">else</span> y :: merge(xs, ys1)</div><div class="line">  	&#125;</div><div class="line">  <span class="keyword">val</span> n = xs.length / <span class="number">2</span></div><div class="line">  <span class="keyword">if</span> (n == <span class="number">0</span>) xs</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">val</span> (ys, zs) = xs splitAt n </div><div class="line">    merge(orderedMergeSort(ys), orderedMergeSort(zs))</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>T &lt;: Ordered[T]</code>表示传入排序函数的List元素必须是<code>Ordered[T]</code>的subtype，<code>T</code>是本身的subtype。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> people = <span class="type">List</span>(<span class="keyword">new</span> <span class="type">Person</span>(<span class="string">"aa"</span>, <span class="string">"bb"</span>), <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">"cc"</span>, <span class="string">"dd"</span>))</div><div class="line">orderMergeSort(people)</div><div class="line">  </div><div class="line">orderMergeSort(<span class="type">List</span>(<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>))    <span class="comment">//编译错误，Int不是Ordered[Int]的subtype</span></div></pre></td></tr></table></figure>
<p>参考书籍：</p>
<ol>
<li>Programming in Scala, 3rd edition</li>
<li>Programming Scala </li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Generic&quot;&gt;&lt;a href=&quot;#Generic&quot; class=&quot;headerlink&quot; title=&quot;Generic&quot;&gt;&lt;/a&gt;Generic&lt;/h4&gt;&lt;p&gt;scala支持&lt;code&gt;parameterized types&lt;/code&gt;,其实和java中的&lt;code&gt;generic&lt;/code&gt;是一个含义，java用&lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt;,scala用&lt;code&gt;[T]&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; strings: &lt;span class=&quot;type&quot;&gt;List&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;] = &lt;span class=&quot;type&quot;&gt;List&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;one&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;two&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;three&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; ints: &lt;span class=&quot;type&quot;&gt;List&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;] = &lt;span class=&quot;type&quot;&gt;List&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; somes: &lt;span class=&quot;type&quot;&gt;List&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;Some&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;]] = &lt;span class=&quot;type&quot;&gt;List&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;Some&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), &lt;span class=&quot;type&quot;&gt;Some&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;), &lt;span class=&quot;type&quot;&gt;None&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;Variance&quot;&gt;&lt;a href=&quot;#Variance&quot; class=&quot;headerlink&quot; title=&quot;Variance&quot;&gt;&lt;/a&gt;Variance&lt;/h4&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;X&lt;/span&gt;[+&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;] &lt;/span&gt;&amp;#123;...&amp;#125;   		&lt;span class=&quot;comment&quot;&gt;//covariant&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;X&lt;/span&gt;[-&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;] &lt;/span&gt;&amp;#123;...&amp;#125;   		&lt;span class=&quot;comment&quot;&gt;//contravariant&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;X&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;] &lt;/span&gt;&amp;#123;...&amp;#125;    		&lt;span class=&quot;comment&quot;&gt;//invariant&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;X&lt;/span&gt;[-&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;B&lt;/span&gt;, +&lt;span class=&quot;type&quot;&gt;C&lt;/span&gt;] &lt;/span&gt;&amp;#123;...&amp;#125;	&lt;span class=&quot;comment&quot;&gt;//mixed&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;+&lt;/code&gt;表示如果&lt;code&gt;A&lt;/code&gt;是&lt;code&gt;B&lt;/code&gt;的子类，则&lt;code&gt;X[A]&lt;/code&gt;是&lt;code&gt;X[B]&lt;/code&gt;的子类&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-&lt;/code&gt;表示如果&lt;code&gt;A&lt;/code&gt;是&lt;code&gt;B&lt;/code&gt;的子类，则&lt;code&gt;X[B]&lt;/code&gt;是&lt;code&gt;X[A]&lt;/code&gt;的子类&lt;/p&gt;
&lt;p&gt;如果既不是&lt;code&gt;+&lt;/code&gt;也不是&lt;code&gt;-&lt;/code&gt;，则&lt;code&gt;X[A]&lt;/code&gt;和&lt;code&gt;X[B]&lt;/code&gt;没有关系&lt;/p&gt;
&lt;h5 id=&quot;Covariant&quot;&gt;&lt;a href=&quot;#Covariant&quot; class=&quot;headerlink&quot; title=&quot;Covariant&quot;&gt;&lt;/a&gt;Covariant&lt;/h5&gt;&lt;p&gt;&lt;code&gt;String&lt;/code&gt;是&lt;code&gt;AnyRef&lt;/code&gt;的子类，&lt;code&gt;List[String]&lt;/code&gt;也是&lt;code&gt;List[AnyRef]&lt;/code&gt;的子类。&lt;code&gt;List&lt;/code&gt;在scala中的声明如下&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;List&lt;/span&gt;[+&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Cotravariant&quot;&gt;&lt;a href=&quot;#Cotravariant&quot; class=&quot;headerlink&quot; title=&quot;Cotravariant&quot;&gt;&lt;/a&gt;Cotravariant&lt;/h5&gt;&lt;p&gt;最简单的contravariant是traits &lt;code&gt;FuntionN&lt;/code&gt;, &lt;code&gt;N&lt;/code&gt;从0到22，代表函数参数的数量，比如&lt;code&gt;scala.Function2&lt;/code&gt;。scala使用这些traits来实现匿名函数&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;List&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) map (i =&amp;gt; i + &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// List(4, 5, 6, 7)&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;函数表达式&lt;code&gt;i =&amp;gt; i + 3&lt;/code&gt;其实是&lt;code&gt;scala.Funtion1&lt;/code&gt;的语法糖&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; f: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; =&amp;gt; &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Function1&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;] &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;apply&lt;/span&gt;&lt;/span&gt;(i: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;): &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; = i + &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;List&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) map f&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于Java 8之前的jvm不支持匿名函数，所以scala采用匿名类的方式来实现匿名函数，Java 8中添加了lambdas支持&lt;/p&gt;
&lt;p&gt;traits &lt;code&gt;scala.Function1&lt;/code&gt;的声明为&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Function1&lt;/span&gt;[-&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;, +&lt;span class=&quot;type&quot;&gt;R&lt;/span&gt;] &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AnyRef&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第一个类型参数为函数参数，是contravariant，第二个类型参数为函数返回值，是covariant。对于其他&lt;code&gt;FunctionN&lt;/code&gt; ，函数参数都是contravariant&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CSuper&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;msuper&lt;/span&gt;&lt;/span&gt;() = println(&lt;span class=&quot;string&quot;&gt;&quot;CSuper&quot;&lt;/span&gt;) &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CSuper&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;m&lt;/span&gt;&lt;/span&gt;() = println(&lt;span class=&quot;string&quot;&gt;&quot;C&quot;&lt;/span&gt;) &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CSub&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;C&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;msub&lt;/span&gt;&lt;/span&gt;() = println(&lt;span class=&quot;string&quot;&gt;&quot;CSub&quot;&lt;/span&gt;) &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; f: &lt;span class=&quot;type&quot;&gt;C&lt;/span&gt; =&amp;gt; &lt;span class=&quot;type&quot;&gt;C&lt;/span&gt; 	= 	(c: &lt;span class=&quot;type&quot;&gt;C&lt;/span&gt;)		=&amp;gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;C&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    f:			=	(c: &lt;span class=&quot;type&quot;&gt;CSuper&lt;/span&gt;)	=&amp;gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;CSub&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    f:			=	(c: &lt;span class=&quot;type&quot;&gt;CSuper&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;C&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    f: 			=	(c: &lt;span class=&quot;type&quot;&gt;C&lt;/span&gt;)		=&amp;gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;CSub&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    f:			=	(c: &lt;span class=&quot;type&quot;&gt;Csub&lt;/span&gt;)	=&amp;gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;CSuper&lt;/span&gt;		&lt;span class=&quot;comment&quot;&gt;//编译错误！&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为什么?&lt;/p&gt;
    
    </summary>
    
      <category term="scala" scheme="http://barcahead.info/categories/scala/"/>
    
    
  </entry>
  
  <entry>
    <title>InterviewStreet solutions</title>
    <link href="http://barcahead.info/2012/08/16/interviewstreet-solutions/"/>
    <id>http://barcahead.info/2012/08/16/interviewstreet-solutions/</id>
    <published>2012-08-15T16:10:00.000Z</published>
    <updated>2016-11-19T06:53:25.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Kingdom-Connectivity"><a href="#Kingdom-Connectivity" class="headerlink" title="Kingdom Connectivity"></a>Kingdom Connectivity</h4><p>大意就是计算一个图中从A到B一共有多少条路径，如果包含环就返回infinit。思路是首先找出从A到B所有可能经过的点，这里可以从A和B分别dfs，找出可达点的交集。然后再对这些点做拓扑排序，这个过程中记录到每个点的路径数。有环的情况也可以在时候排除掉。</p>
<h4 id="String-Reduction"><a href="#String-Reduction" class="headerlink" title="String Reduction"></a>String Reduction</h4><p>一个字符串只有a，b，c三种字符，相邻的不同字符可以转变成另一个字符，问最后字符串最短的长度。这题是规律题，数学题证明一直不是我的强项，所以就大概领会下吧。首先要发现如果只有一种字符，字符串的长度就无法缩小了。其余情况最后字符串长度只能是1或为2。长度为2的情况最后字符个数只能为1，1，1，逆着推回去，可以发现三种字符串个数同时为偶数或者奇数。长度为1的最后状态是1，1，0，同理往回推。</p>
<h4 id="Binomial-Coefficients"><a href="#Binomial-Coefficients" class="headerlink" title="Binomial Coefficients"></a>Binomial Coefficients</h4><p><code>log_p(C)</code>表示排列组合C中p的个数，<code>b_p(n)</code>表示n以p为base表示时每一位数字之和,则<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">log_p(C) = log_p(n!) - log_p(k!) - log_p((n-k))</div><div class="line">log_p(n!) = sum(floor(n/p^i)) = (n - b_p(n)) / (p -1)</div><div class="line">log_p(C) = (b_p(k) + b_p(n-k) - b_p(n)) / (p-1)</div></pre></td></tr></table></figure></p>
<p>若p base下k加上n-k没有进位，则<code>b_p(k)+b_p(n-k)-b_p(n)</code>等于0，则C中不存在p。若有进位，低位减p，高位加1，C中至少存在一个p。<br>没有进位的k满足每一位小于等于n中对应位的值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">n = a0 + a1*p + ... + ai*p^i</div><div class="line">ans = n + 1 - mul(ai+1)</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h4 id="Meeting-Point"><a href="#Meeting-Point" class="headerlink" title="Meeting Point"></a>Meeting Point</h4><p>可移动到相邻的八个格子中，即求Chebyshev距离。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">d = max( |x1-x2|, |y1-y2| )</div><div class="line">  = ( |x1+y1-x2-y2| + |x1-y1-(x2+y2)| ) / 2</div></pre></td></tr></table></figure></p>
<p>所以<code>point(x, y)</code>间的Chebyshev距离可以转化为求<code>point(x+y, x-y)</code>间的Manhattan距离。Manhattan距离比较好求，可以对点集在x轴和y轴分别排序求出，然后枚举每个点X轴和Y轴距离之和，求出最小值即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ans = min(lx[xi]+rx[xi]+ly[yi]+ry[yi])</div></pre></td></tr></table></figure></p>
<h4 id="Matrix"><a href="#Matrix" class="headerlink" title="Matrix"></a>Matrix</h4><p>需要隔离K个machine，必须删除K-1条边。把边按时间从大到小排序，依次选择，用并查集维护连通子图和子图中的machine。若边加入后，存在两个machine连通，则不选择此条边。</p>
<h4 id="Problem-Solving"><a href="#Problem-Solving" class="headerlink" title="Problem Solving"></a>Problem Solving</h4><p>即求有向无环图的最小路径覆盖数 = 定点数 - 扩点后二分图最大匹配数。扩点方法为二分图左边右边各有所有一个点集V,V’，若有从点i到点j的边，则添加从i到j’的边。</p>
<p>代码略, 更新于2012.09.18</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Kingdom-Connectivity&quot;&gt;&lt;a href=&quot;#Kingdom-Connectivity&quot; class=&quot;headerlink&quot; title=&quot;Kingdom Connectivity&quot;&gt;&lt;/a&gt;Kingdom Connectivity&lt;/h4&gt;&lt;p&gt;大意就是计算一个图中从A到B一共有多少条路径，如果包含环就返回infinit。思路是首先找出从A到B所有可能经过的点，这里可以从A和B分别dfs，找出可达点的交集。然后再对这些点做拓扑排序，这个过程中记录到每个点的路径数。有环的情况也可以在时候排除掉。&lt;/p&gt;
&lt;h4 id=&quot;String-Reduction&quot;&gt;&lt;a href=&quot;#String-Reduction&quot; class=&quot;headerlink&quot; title=&quot;String Reduction&quot;&gt;&lt;/a&gt;String Reduction&lt;/h4&gt;&lt;p&gt;一个字符串只有a，b，c三种字符，相邻的不同字符可以转变成另一个字符，问最后字符串最短的长度。这题是规律题，数学题证明一直不是我的强项，所以就大概领会下吧。首先要发现如果只有一种字符，字符串的长度就无法缩小了。其余情况最后字符串长度只能是1或为2。长度为2的情况最后字符个数只能为1，1，1，逆着推回去，可以发现三种字符串个数同时为偶数或者奇数。长度为1的最后状态是1，1，0，同理往回推。&lt;/p&gt;
&lt;h4 id=&quot;Binomial-Coefficients&quot;&gt;&lt;a href=&quot;#Binomial-Coefficients&quot; class=&quot;headerlink&quot; title=&quot;Binomial Coefficients&quot;&gt;&lt;/a&gt;Binomial Coefficients&lt;/h4&gt;&lt;p&gt;&lt;code&gt;log_p(C)&lt;/code&gt;表示排列组合C中p的个数，&lt;code&gt;b_p(n)&lt;/code&gt;表示n以p为base表示时每一位数字之和,则&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;log_p(C) = log_p(n!) - log_p(k!) - log_p((n-k))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;log_p(n!) = sum(floor(n/p^i)) = (n - b_p(n)) / (p -1)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;log_p(C) = (b_p(k) + b_p(n-k) - b_p(n)) / (p-1)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;若p base下k加上n-k没有进位，则&lt;code&gt;b_p(k)+b_p(n-k)-b_p(n)&lt;/code&gt;等于0，则C中不存在p。若有进位，低位减p，高位加1，C中至少存在一个p。&lt;br&gt;没有进位的k满足每一位小于等于n中对应位的值&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;n = a0 + a1*p + ... + ai*p^i&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ans = n + 1 - mul(ai+1)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="algorithm" scheme="http://barcahead.info/categories/algorithm/"/>
    
    
  </entry>
  
</feed>
